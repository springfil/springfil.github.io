// дабы не дублировать миллион раз код, есть ФУНКЦИИ

//Объявление при помощи ключевого слова function
function имя(параметры) {
    ...тело...
  }
 
// может быть вызвана при помощи своего имени
имя()
имя() // тело ф-ции выполнится два раза


//Локальные переменные
//Переменные, объявленные внутри функции, видны только внутри этой функции.
function имя(параметры) {
   let localnaia
    ...тело...
  }

  
// Внешние переменные 
let userName = 'Вася'; // showMessage() имеет доступ к userName

function showMessage() {
  let message = 'Привет, ' + userName;
  alert(message);
}

showMessage(); // Привет, Вася  

//мы можем менять значение внешней переменной внутри функции

//Если одноимённая переменная объявляется внутри функции, тогда она перекрывает внешнюю
//внешняя будет проигнорирована
let value = a
function result(){
    let value = b;
    console.log(value);// b
}
result();
console.log(value)//a

//Глобальные переменные видимы для любой функции 
//(если только их не перекрывают одноимённые локальные переменные).



//Мы можем передать внутрь функции любую информацию, используя параметры.
function showMessage(from, text) { // параметры: from, text
    alert(from + ': ' + text);
  }
  
  showMessage('Аня', 'Привет!'); // Аня: Привет! (*) //аргументы Аня и Привет
  showMessage('Аня', "Как дела?"); // Аня: Как дела? (**)



//Значения по умолчанию
//если аргумент не указан возвращает undefined
//НО МОЖНО ЕГО ЗАДАТЬ
function showMessage(from, text = "текст не добавлен") {
    alert( from + ": " + text );
  }
  
  showMessage("Аня"); // Аня: текст не добавлен
//можно передать функцию
function showMessage(from, text = anotherFunction()) {
    // anotherFunction() выполнится только если не передан text
    // результатом будет значение text
  }

  
 // ?? использование будет лучшей практикой, в случае, 
 // если большинство ложных значений, таких как 0, следует расценивать как «нормальные».
 function showCount(count) {
    // если count равен undefined или null, показать "неизвестно"
    alert(count ?? "неизвестно");
  }
  showCount(0); // 0
  showCount(null); // неизвестно
  showCount(); // неизвестно

  
//Возврат значения
//Функция может вернуть результат, который будет передан в вызвавший её код.
function sum(a, b) {
    return a + b;
  }
  
  let result = sum(1, 2);
  alert( result ); // 3  

// return может быть несколько

function checkAge(age) {
    if (age >= 18) {
      return true;
    } else {
      return confirm('А родители разрешили?');
    }
  }
  
  let age = prompt('Сколько вам лет?', 18);
  
  if ( checkAge(age) ) {
    alert( 'Доступ получен' );
  } else {
    alert( 'Доступ закрыт' );
  }  

// если выражение после return длинное, писать так 
return(
    кое-что
)



//Выбор имени функции
"get…" – возвращают значение,
"calc…" – что-то вычисляют,
"create…" – что-то создают,
"check…" – что-то проверяют и возвращают логическое значение, и т.д.
"show" - чето показывает
//Функции должны быть короткими и делать только что-то одно. 
//Если это что-то большое, имеет смысл разбить функцию на несколько меньших. 
