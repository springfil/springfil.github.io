// Function Declaration (Объявление Функции):
function sayHi() {
    alert( "Привет" );
  }


//Существует ещё один синтаксис создания функций,
// который называется Function Expression (Функциональное Выражение).
let sayHi = function() {
    alert( "Привет" );
  }; // создали ф-цию и поместили ее в sayHi
// В обоих приведённых выше примерах функция хранится в переменной sayHi
//В JavaScript функция – это значение, поэтому мы можем обращаться с ней как со значением.
//Поэтому мы можем работать с ней так же, как и с другими видами значений.
function sayHi() {   // (1) создаём
    alert( "Привет" );
  }
  
  let func = sayHi;    // (2) копируем
  
  func(); // Привет     // (3) вызываем копию (работает)!
  sayHi(); // Привет    //     эта тоже все ещё работает (почему бы и нет)

// let copyFunc = someFunc - возвращает f{}  
// let copyFunc = someFunc() - возвращает результат выполнения someFunc 


//
function ask(question, yes, no) {
  if (confirm(question)) yes()
  else no();
}

function showOk() {
  alert( "Вы согласны." );
}

function showCancel() {
  alert( "Вы отменили выполнение." );
}

// использование: функции showOk, showCancel передаются в качестве аргументов ask
ask("Вы согласны?", showOk, showCancel);
//короткая форма записи при помощи expression 
function ask(question, yes, no) {
  if (confirm(question)) yes()
  else no();
}

ask(
  "Вы согласны?",
  function() { alert("Вы согласились."); },
  function() { alert("Вы отменили выполнение."); }
);

// в режиме use strict у funcDeclaration {} блочная область видимости 

// Итого
// Функции – это значения. Они могут быть присвоены, скопированы или объявлены в любом месте кода.
// Если функция объявлена как отдельная инструкция в основном потоке кода, то это “Function Declaration”.
// Если функция была создана как часть выражения, то это “Function Expression”.
// Function Declaration обрабатываются перед выполнением блока кода. Они видны во всём блоке.
// Функции, объявленные при помощи Function Expression, создаются только когда поток выполнения достигает их.