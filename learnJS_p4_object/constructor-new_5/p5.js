// {} - создает единственный экземпляр 
// в ООП часто нужно создать мн-во(юзеры,меню,тд)
//Это можно сделать при помощи функции-конструктора и оператора "new".


//Функция конструктор 
// Функции-конструкторы технически являются обычными функциями. Но есть два соглашения:
// Имя функции-конструктора должно начинаться с большой буквы.
// Функция-конструктор должна выполняться только с помощью оператора "new".

function User(name) {
    this.name = name;
    this.isAdmin = false;
  }
  
  let user = new User("Jack");
  
  alert(user.name); // Jack
  alert(user.isAdmin); // false
// Когда функция вызывается как new User(...), происходит следующее:
// Создаётся новый пустой объект, и он присваивается this.
// Выполняется тело функции. Обычно оно модифицирует this, добавляя туда новые свойства.
// Возвращается значение this.  

//Другими словами, new User(...) делает что-то вроде:
function User(name) {
    // this = {};  (неявно)
  
    // добавляет свойства к this
    this.name = name;
    this.isAdmin = false;
  
    // return this;  (неявно)
  }

//Таким образом, let user = new User("Jack") возвращает тот же результат, что и:
let user = {
    name: "Jack",
    isAdmin: false
  };

// теперь можно юзать User('Biba')/User('Boba')
// основной целью конструкторов – реализовать код для многократного создания однотипных объектов.


//Давайте ещё раз отметим – технически любая функция 
//(кроме стрелочных функций, поскольку у них нет this) может использоваться в качестве конструктора. 
const Obj = () => ({});
const test = new Obj();
console.log(test); //TypeError: Obj is not a constructor

function Test() {};
const res = new Test();
console.log(res) // Test {}



// Если в нашем коде присутствует большое количество строк, создающих один сложный объект, 
// то мы можем обернуть их в функцию-конструктор, которая будет немедленно вызвана, вот так:

// создаём функцию и сразу же вызываем её с помощью new
let user = new function() {
    this.name = "John";
    this.isAdmin = false;
  
    // ...другой код для создания пользователя
    // возможна любая сложная логика и инструкции
    // локальные переменные и так далее
  };
//   Такой конструктор не может быть вызван снова, 
//   так как он нигде не сохраняется, просто создаётся и тут же вызывается.  



//Проверка на вызов в режиме конструктора: new.target
// Используя специальное свойство new.target внутри функции, 
// мы можем проверить, вызвана ли функция при помощи оператора new или без него.
function User() {
    alert(new.target);
  }
  
  // без "new":
  User(); // undefined
  
  // с "new":
  new User(); // function User { ... }

// Ща будет BAD BAD practise
function User(name) {
    if (!new.target) { // в случае, если вы вызвали меня без оператора new
      return new User(name); // ...я добавлю new за вас
    }
  
    this.name = name;
  }
  
  let john = User("John"); // переадресовывает вызов на new User
  alert(john.name); // John



//Возврат значения из конструктора, return

// При вызове return с объектом, вместо this вернётся объект.
// При вызове return с примитивным значением, оно проигнорируется.
function BigUser() {
    this.name = "John";
    return { name: "Godzilla" };  // <-- возвращает этот объект
}
alert(new BigUser().name);  // Godzilla, получили этот объект

//пустой return
function SmallUser() {

    this.name = "John";
  
    return; // <-- возвращает this
  }
  
  alert( new SmallUser().name );  // John



// пропуск скобок
let user = new User; // <-- без скобок
// то же, что и
let user = new User();



//Создание методов в конструкторе
// Использование конструкторов для создания объектов даёт большую гибкость. 
// Функции-конструкторы могут иметь параметры, определяющие, как создавать объект и что в него записывать.
// Конечно, мы можем добавить к this не только свойства, но и методы.
// Например, new User(name) ниже создаёт объект с заданным name и методом sayHi:
function User(name) {
    this.name = name;
  
    this.sayHi = function() {
      alert( "Меня зовут: " + this.name );
    };
  }
  
  let john = new User("John");
  
  john.sayHi(); // Меня зовут: John
  
  /*
  john = {
     name: "John",
     sayHi: function() { ... }
  }
  */