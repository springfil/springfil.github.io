//Правила преобразования
// Не существует преобразования к логическому значению.
// В логическом контексте все объекты являются true, всё просто.
// Существует лишь их числовое и строковое преобразование.

// Числовое преобразование происходит, когда мы вычитаем объекты или применяем математические функции.
// Например, объекты Date (которые будут рассмотрены в главе Дата и время) могут быть вычтены,
// и результатом date1 - date2 будет разница во времени между двумя датами.

// Что касается преобразований к строке – оно обычно происходит, когда мы выводим на экран объект
// при помощи alert(obj) и в подобных контекстах.

//Хинты - Существует три варианта преобразования типов
// Чтобы выполнить преобразование, JavaScript пытается найти и вызвать три следующих метода объекта:

// Вызвать obj[Symbol.toPrimitive](hint) – метод с символьным ключом Symbol.toPrimitive (системный символ),
// такой метод существует,

// Иначе, если хинт равен "string"
// попробовать вызвать obj.toString() или obj.valueOf(), смотря какой из них существует.

// Иначе, если хинт равен "number" или "default"
// попробовать вызвать obj.valueOf() или obj.toString(), смотря какой из них существует.

//Symbol.toPrimitive
{
  let user = {
    name: "John",
    money: 1000,

    [Symbol.toPrimitive](hint) {
      alert(`hint: ${hint}`);
      return hint == "string" ? `{name: "${this.name}"}` : this.money;
    },
  };
}
// демонстрация результатов преобразований:
alert(user); // hint: string -> {name: "John"}
alert(+user); // hint: number -> 1000
alert(user + 500); // hint: default -> 1500

//По умолчанию обычный объект имеет следующие методы toString и valueOf:
// Метод toString возвращает строку "[object Object]".
// Метод valueOf возвращает сам объект.
let user = { name: "John" };
alert(user); // [object Object]
alert(user.valueOf() === user); // true
