//Функцию, которая является свойством объекта, называют методом этого объекта.
//мы получили метод sayHi объекта user.
let user = {
    name: "John",
    age: 30
  };
user.sayHi = function() {
    alert("Привет!");
  }; 
user.sayHi(); // Привет!
//это релевантно 
let user = {
    // ...
  }; 
  // сначала, объявляем
  function sayHi() {
    alert("Привет!");
  }  
  // затем добавляем в качестве метода
  user.sayHi = sayHi; 
  user.sayHi();


//Когда мы пишем наш код, используя объекты для представления сущностей реального мира, 
//– это называется объектно-ориентированным программированием или сокращённо: «ООП».



//сокращенная запись метода 
// эти объекты делают одно и то же
user = {
    sayHi: function() {
      alert("Привет");
    }
  };
  // сокращённая запись выглядит лучше, не так ли?
  user = {
    sayHi() { // то же самое, что и "sayHi: function(){...}"
      alert("Привет");
    }
  };
// ТУТ КАКАЯ_ТО ХУЙНЯ С НАСЛЕДОВАНИЕМ


//Ключевое слово «this» в методах
//Значение this – это объект «перед точкой», который используется для вызова метода.
let user = {
    name: "John",
    age: 30,  
    sayHi() {
      // "this" - это "текущий объект".
      alert(this.name);
    } 
  }; 
  user.sayHi(); // John //user.sayHi() значением this будет являться user (ссылка на объект user).



//«this» не является фиксированным
//this вычисляется во время выполнения кода, в зависимости от контекста.
//Правило простое: если вызывается obj.f(), то во время вызова f, 
//this – это obj. Так что, в приведённом выше примере это либо user, либо admin.

///У стрелочных функций нет «this» 
// она берет его из внешней функции 
let user = {
    firstName: "Ilya",
    sayHi() {
      let arrow = () => alert(this.firstName);
      arrow();
    }
  };
user.sayHi(); // Ilya

/*
Итого
Функции, которые находятся в свойствах объекта, называются «методами».
Методы позволяют объектам «действовать»: object.doSomething().
Методы могут ссылаться на объект через this.


Значение this определяется во время исполнения кода.
При объявлении любой функции в ней можно использовать this,
но этот this не имеет значения до тех пор, пока функция не будет вызвана.

Функция может быть скопирована между объектами (из одного объекта в другой).

Когда функция вызывается синтаксисом «метода» – object.method(), 
значением this во время вызова является object.


Также ещё раз заметим, что стрелочные функции являются особенными – у них нет this. 
Когда внутри стрелочной функции обращаются к this, то его значение берётся извне.
*/