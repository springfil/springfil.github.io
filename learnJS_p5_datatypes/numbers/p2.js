// способы записи числа
console.log( 7.3e9 );  // 7.3 миллиардов (7,300,000,000)
console.log( 1e-6 ): //шесть нулей, слева от 1

//Шестнадцатеричные, двоичные и восьмеричные числа
alert( 0xff ); // 255
alert( 0xFF ); // 255 (то же самое, регистр не имеет значения)

let a = 0b11111111; // бинарная форма записи числа 255
let b = 0o377; // восьмеричная форма записи числа 255
alert( a == b ); // true, с двух сторон число 255



//toString(base)
//num.toString(base) возвращает строковое представление числа num в системе счисления base.
let num = 255;
alert( num.toString(16) );  // ff
alert( num.toString(2) );   // 11111111
alert( 123456..toString(36) ); // 2n9c // две точки ! если одно, то далее идет десятичная часть


// Округление
// Math.floor
// Округление в меньшую сторону: 3.1 становится 3, а -1.1 — -2.
// Math.ceil
// Округление в большую сторону: 3.1 становится 4, а -1.1 — -1.
// Math.round
// Округление до ближайшего целого: 3.1 становится 3, 3.6 — 4, а -1.1 — -1.
// Math.trunc (не поддерживается в Internet Explorer)
// Производит удаление дробной части без округления: 3.1 становится 3, а -1.1 — -1.

// Что если нам надо округлить число до n-ого количества цифр в дробной части?
// Умножить и разделить.
// Например, чтобы округлить число до второго знака после запятой, мы можем умножить число на 100, 
// вызвать функцию округления и разделить обратно.

let num = 1.23456;
alert( Math.floor(num * 100) / 100 ); // 1.23456 -> 123.456 -> 123 -> 1.23

//Метод toFixed(n) округляет число до n знаков после запятой и возвращает строковое представление результата.
let num = 12.34;
alert( num.toFixed(1) ); // "12.3"


alert( 0.1 + 0.2 ); // 0.30000000000000004
// В JavaScript нет возможности для хранения точных значений 0.1 или 0.2, используя двоичную систему, 
// точно также, как нет возможности хранить одну третью в десятичной системе счисления


// +0   -0  из-за бита на знак



// Проверка: isFinite и isNaN
// isNaN(value) преобразует значение в число и проверяет является ли оно NaN:
alert( isNaN(NaN) ); // true
alert( isNaN("str") ); // true
// isFinite(value) преобразует аргумент в число и возвращает true, 
// если оно является обычным числом, т.е. не NaN/Infinity/-Infinity:
alert( isFinite("15") ); // true
alert( isFinite("str") ); // false, потому что специальное значение: NaN
alert( isFinite(Infinity) ); // false, потому что специальное значение: Infinity

// Методы Number.isNaN и Number.isFinite – это более «строгие» версии функций isNaN и isFinite.
//  Они не преобразуют аргумент в число, а наоборот – первым делом проверяют,
//  является ли аргумент числом (принадлежит ли он к типу number).
//Object.is(a, b) идентичен a === b.


// parseInt и parseFloat
// В реальной жизни мы часто сталкиваемся со значениями
// у которых есть единица измерения, например "100px" или "12pt" в CSS

// Они «читают» число из строки. Если в процессе чтения возникает ошибка, 
// они возвращают полученное до ошибки число. Функция parseInt возвращает целое число,
// а parseFloat возвращает число с плавающей точкой:
alert( parseInt('100px') ); // 100
alert( parseFloat('12.5em') ); // 12.5

alert( parseInt('12.3') ); // 12, вернётся только целая часть
alert( parseFloat('12.3.4') ); // 12.3, произойдёт остановка чтения на второй точке
//parseInt(str, radix) radix - система счисления


// Другие математические функции
Math.random()
Math.max(a, b, c...) / Math.min(a, b, c...)
Math.pow(n, power)